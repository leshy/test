<script type="text/javascript">



/*
  RemoteObject.prototype.subscribe = function(property,callback) {
  var self = this
  if (!self.subscriptions[property]) { self.subscriptions[property] = [] }
  self.subscriptions[property].push(callback)
  }
*/



// a = new RemoteObject("testobj",{name: 333, bla: "ivan", testf: "function" })




$(document).ready(function() { 

    function Router() { 
	this.subscriptions = {}
	this.remoteobjects = {}
    }


    Router.prototype.subscribe = function(object,property,callback) {
	var self = this
//	console.log('subscribe',property)
	if (!self.subscriptions[object]) { self.subscriptions[object] = {} }
	if (!self.subscriptions[object][property]) { self.subscriptions[object][property] = [] }
	self.subscriptions[object][property].push(callback)
	for (var prop in self.subscriptions[object]) {  console.log(prop) }
    }


    Router.prototype.event = function(object,property,value,oldvalue) {
	var self = this
	var objectname = object.objectname
//	console.log("event",objectname,object,property,self.subscriptions)

	if (self.subscriptions["*"]["*"]) {
	    self.subscriptions["*"]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}



	if (self.subscriptions["*"][property]) {
	    self.subscriptions["*"][property].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}


	if (self.subscriptions[objectname]["*"]) {
	    self.subscriptions[objectname]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}

	if (!self.subscriptions[objectname]) { return }
	if (!self.subscriptions[objectname][property]) { return }
	self.subscriptions[objectname][property].forEach( function(callback) {
	    callback(value,oldvalue,object,property)
	})
    }


    router = new Router()
    user = undefined //placeholder

    function RemoteObject(name,obj) {
	this.objectname = name
	if (name == 'user') { user = this }
	router.remoteobjects[name] = this
	if (!router.subscriptions[name]) {
	    router.subscriptions[name] = {}
	}
	this.update(obj)
    }


    RemoteObject.prototype.update = function(obj) {
	var self = this
	console.log("update",router,obj)
	for (var property in obj) {
	    closure(property,obj[property])

	    function closure(property,value) {
		if (value == "function") {
		    self[property] = function() { console.log ("calling remote function " + property) 
						  var data = {}
						  data['object'] = self.objectname
						  data['function'] = property
						  var args = Array.prototype.slice.call(arguments);

						  data['arguments'] = args

						  //console.log(data)

						  socket.emit('call',JSON.stringify(data))
						}
		    return
		}

		if (!self["_" + property]) { 
		    self.__defineSetter__(property, function (value) { 
			var data = {objects: {}, secret: secret}
			data.objects[this.objectname] = {}
			data.objects[this.objectname][property] = value
			console.log("emiting objectsync")
			socket.emit ('objectsync',JSON.stringify(data))
		    })
		    self.__defineGetter__(property, function () { return self["_" + property] })
		} else {
		    if (self["_" + property] == value ) { return }
		}
		
		var oldvalue = self["_" + property]
		self["_" + property] = value

		if (oldvalue != value) {
		    router.event(self,property,value,oldvalue)
		    //if (self.subscriptions[property]) {self.subscriptions[property].forEach( function(callback) { callback(value,oldvalue,property) })}
		    //if (self.subscriptions["*"]) {self.subscriptions["*"].forEach( function(callback) { callback(value,oldvalue,property) })}
		}
	    }
	}
    }
    
    
    var secret = "<%= user.secret %>"
    var uid = "<%= user._id %>"

    var remoteobjects = {}
    var object_subscriptions = {}
    

    $("#bla").html("js ok")
    $("#message").hide()


    $('.editable').click(function(event) {
	var node = $(event.currentTarget)
	var data = node.html()
	if (data.search('<input') != -1) { return }

	var input = $("<input size='" + (data.length + 1) + "' type='text' value='" + data + "'>")

	function done() {
	    input.trigger('edited',[node,input.val(),data])
	    node.html(input.val())
	}

	input.blur(done)

	input.keypress(function(event) {
	    if (event.which == 13) { done() }
	})

	node.html(input)
	input.focus()
	input.trigger('editstart',[node,data])
    });


    $(".sync_user_name").bind('edited',function(e,node,data,olddata) {
	user.name = data
	//syncproperty("user","name",data)
    })


    $("#edit_mybitcoin_amount").bind('editstart',function(e,node,data) {
	$("#mybitcoin_link").html("")	    
    })

    $("#user_withdrawal_amount").bind('edited',function(e,node,data) {
	var amount = parseFloat(data)
	if (!amount) {
	    message( "invalid amount")
	    return
	}
    })

    $("#user_withdrawal_address").bind('edited',function(e,node,data) {	    
	if (data.length != 34) {
	    message( "invalid address")
	    return
	} else {
	    syncproperty("user","address_withdrawal",data)
	}
    })


    function preinitminefield() {
	$( "#minefieldslider" ).slider({
	    value:14,
	    min: 3,
	    max: 24,
	    step: 1,
	    slide: function( event, ui ) {
		var chance = 100 - (ui.value / (25 / 100))
		var win = (90 / chance)
		win = Math.round(parseFloat(win) * 100) / 100
		displayminefield(generateminefield(ui.value))

		$( "#minefieldchance" ).html( ui.value + " mines, win amount x" + win );
	    },

	    stop: function ( event, ui ) {
		//user.newminefield(ui.value)
		$("#sync_minefield_hash").html("click on the minefield to start a new game.")
	    }

	    
	});

	$( "#minefield_ammount_radio" ).buttonset();
    }


    preinitminefield()

    function initminefield() {
	socket.emit('initminefield',{ mines: 3 })
    }

    function generateminefield(minenum) {
	console.log("generating minefield of size",minenum)
	function randomboolean() {
	    return (Math.random() > 0.5)
	}

	function randomrange(num) {
	    return Math.floor(Math.random() * num)
 	}

	function rarray(len,rndfn) {
	    var a = []
	    for (var i = 0 ; i <len;i++) { a.push(rndfn())}
	    return a
	}
	function r2darray(len,rndfn) {
	    return rarray(len,function() { return rarray(len,rndfn) })
	}

	var cnt = -1
	function counter() { cnt++; return cnt }
	
	var empty = rarray(25,counter)
	var mines = rarray(25,function() { return 0 } )

	
	for (var i = 0; i < minenum; i++) { 
	    var num = randomrange(empty.length)
	    mines[empty[num]] = 1
	    empty.splice(num,1)
	}
	return r2darray(5,function() { var a = mines.pop(); return a  })
    }

    function displayminefield(minefield) {
	console.log('displaymf',minefield)
	var table = $("<table></table>")
	for (var rowid in minefield) {
	    row = minefield[rowid]
	    var tablerow =  $("<tr></tr>")
	    for (var entryid in row) {


		function closure(rowid,entryid) {
		    entry = row[entryid]

		    var field = $("<td></td>")
		    
		    if (entry == 3) { 
			var mine = $("<span class='mine mine_step_yes'></span>")
			mine.click( function() { user.newminefield($( "#minefieldslider" ).slider('value'))})
			field.append(mine)
		    }

		    if (entry == 2) { 
			field.append($("<span class='mine mine_step_no'>"))
		    }
		    
		    if (entry == 1) {
			var mine = $("<span class='mine mine_yes'></span>")
			mine.click( function() { user.newminefield($( "#minefieldslider" ).slider('value'))})
			field.append(mine)
		    }

		    if (entry == 0) { 
			var mine = $("<span class='mine mine_no'></span>")
			mine.click( function() { user.newminefield($( "#minefieldslider" ).slider('value'))})
			field.append(mine)
		    }

		    if (entry == -1) { 
			var unknown =  $("<span class='mine mine_undefined'></span>")
			unknown.click(function() { router.remoteobjects.minefield.step([rowid,entryid])  })
			
			field.append(unknown)
		    }

		    return field
		}

		tablerow.append(closure(rowid,entryid))
		
	    }
	    table.append(tablerow)
	}
	$("#minefield").html(table)
    }



    displayminefield(generateminefield(12))

    function message(string) {
	var message = $("#message")
	message.html(string)
	message.fadeIn(500)
	setTimeout(function() { message.fadeOut(500) },1000)
    }

    function reload_transaction_history() {
	if (router.remoteobjects.user.transaction_history.length == 0) { 
	    var code = "no transactions"
	} else {
	    
	    var code = "<table cellspacing=0 cellpadding=13>"
	    code += "<thead>"
	    code += "<tr>"
	    code += "<th>time</th>"
	    code += "<th>from/to</th>"
	    code += "<th></th>"
	    code += "<th>amount</th>"
	    code += "<th>balance</th>"
	    code += "</tr>"
	    code += "</thead>"
	    code += "<tbody class='transactionhistory'>"

	    var darkflip = true

	    router.remoteobjects.user.transaction_history.forEach(function(row) {
		var time = new Date(parseInt(row.time))
		console.log(parseInt(row.time))
		var now = time.getDate() + "." + time.getMonth() + "." + time.getFullYear() + ", " + time.getHours() + ":" +  time.getMinutes() + ":" + time.getSeconds()
		
		if (darkflip) {
		    code += "<tr bgcolor='#ddd'>"
		    darkflip = false
		} else {
		    code += "<tr>"
		    darkflip = true
		}

		code +="<td class='transactionhistory'>" +  now  + "</td>"
		code +="<td class='transactionhistory'>" +  row.other_party + "</td>"
		if (row.deposit) {
		    code +="<td class='transactionhistory plus'><font color='green' size='2em'><b>+</b></font></td>"
		} else {
		    code +="<td class='transactionhistory minus'><font color='red' size='2em'><b>-</b></font></td>"
		}
		code +="<td class='transactionhistory'>" +  row.amount + "</td>"
		code +="<td class='transactionhistory'>" +  row.balance + "</td>"
		code += "</tr>"
	    })

	    code += "</tbody></table>"
	}

	$("#transaction_history").html(code)
    }
    
    $("#edit_mybitcoin_amount").bind('edited',function(e,node,data,olddata) {

	var amount = parseFloat(data)
	console.log("amount",amount)

	if (!amount) {
	    message("invalid amount")
	    //$("#mybitcoin_link").html( "invalid amount :(")
	    return
	}
	
	$("#mybitcoin_link").html("communicating with mybitcoin...")
	$.post("/ajax/mybitcoinlink",{ secret: secret, amount: amount }, function (data) {
	    data = $.parseJSON(data)
	    if (data.responsecode == 0) {
		$("#mybitcoin_link").html ("<a href='https://www.mybitcoin.com/sci/paypage.php?t=" + data.message + "'>pay</a>" )
	    } else {
		$("#mybitcoin_link").html( data.message)
	    }
	})
    })
    

    var socket = io.connect('http://lgate-public:45284');
    socket.emit('hello', { uid: uid, secret: secret });
    socket.on('connection', function () {
	console.log('websocket connected. authorizing')

    });



    $("#btnwithdraw").click(function() { 
	console.log("CALLING SENDMONEY")
//	socket.emit('call', { fun: 'sendMoney', secret: secret, args: [ $("#user_withdrawal_address").html(), $("#user_withdrawal_amount").html() ]  })
	user.sendMoney($("#user_withdrawal_address").html(), $("#user_withdrawal_amount").html())
    })
    
    $("#btn_deposit_generate").click(function() {
	user.generatedepositaddr()
    })

    $("#socketio").click(function() {
	user.lalala(3,2)
})


    
    $("#logout").click(function() {
	$.post("/ajax/logout",{ secret: secret }, function (data) { 
	    data = $.parseJSON(data)
	})
    })
    
    
    socket.on('msg', function(data) {
	data = JSON.parse(data)
	console.log("GOT MESSAGE",data)
	message(data.message)
    })
    

    socket.on('objectsync', function(data) {
	data = JSON.parse(data)
	console.log("new object stream received",data)
	
	for (var objectname in data) {
	    updateobject(objectname,data[objectname])
//	    updateobject(objectname,jQuery.parseJSON(data[objectname]))
	}
    })



    function updateobject(objectname,object) {
	if (!router.remoteobjects[objectname]) {
	    console.log("created new remote object '" + objectname + "'" )
	    router.remoteobjects[objectname] = new RemoteObject(objectname,object)
	} else {
	    console.log("updating remote object '" + objectname + "'" )
	    router.remoteobjects[objectname].update(object)
	}
    }

    function syncproperty(objectname,property,value) {
	router.remoteobjects[objectname][property] = value
    }


    function equal(object1, object2) {
	if (!object2) { return false }

	if ((typeof(object1) != 'object') || (typeof(object2) != 'object' )) {
	    return (object1 == object2)
	}

	
	if (object1.length != object2.length) { return false }
	
	for (var property in object1) { 

	    if (object1[property] != object2[property]) { return false }
	}

	return true   
    }

    

    router.subscribe("*","*",function(value,oldvalue,property,object) {
	console.log(object.objectname, "PROPERTY UPDATED", property,value)
	if ((object[property] != undefined) && (object[property] != null)) {
	    $("#sync_" + object.objectname + "_" + property).html(object[property])
	    $(".sync_" + object.objectname + "_" + property).html(object[property])
	}
	//console.log(property,$(".sync_user_" + property))
    })


    router.subscribe("user","transaction_history",function(value,oldvalue,property,user) {
	reload_transaction_history()
    })

    router.subscribe("user","address_deposit",function(value,oldvalue,property,user) {
	console.log("ADDRESS DEPOSIT CHANGED")
	if (value.length == 0) { $("#address_deposit").html("no addresses"); $("#paybelow").hide(); return }

	var list = $("<span></span>")
	value.forEach(function(address) { list.append($("<b>" + address + "<b><br>"))})
	
	$("#paybelow").show()
	
	if (value.length == 3) {
	    $("#btn_deposit_generate").hide()
	} else {
	    $("#btn_deposit_generate").show()
	}

	$("#address_deposit").html(list)
	//console.log(list)
    })


    router.subscribe("minefield","minefield",function(value,oldvalue,property,object) {
	console.log("NEW MINEFIELD RECEIVED",value,oldvalue,property,object)
	displayminefield(value)
    })


/*    router.subscribe("user","address_withdrawal",function(value,oldvalue,property,user) {
	if (user.address_withdrawal && user.address_withdrawal != "null") { $("#user_address_withdrawal").html(user.address_withdrawal); return }
    })
*/

    
    var tabs = [ $('#tab_minefield'), $('#tab_balance'),$('#tab_settings'), $('#tab_chat'), $('#tab_faq') ]
    tabs.forEach(function(tab) {tab.hide() })
    var selectedtab = undefined

    function selecttab(tabid) {
	if (selectedtab != undefined) {
	    tabs[selectedtab].trigger('tabhide')
	    tabs[selectedtab].hide()
	    if (tabid == selectedtab) { selectedtab = undefined; return }
	}
	tabs[tabid].trigger('tabshow')
	tabs[tabid].show()
	selectedtab = tabid
    }

    $('#tabbalance').bind('tabshow', function() { $('#small_balance').hide() } )
    $('#tab_balance').bind('tabhide', function() { $('#small_balance').show() } )

    $('#btnminefield').click( function() { selecttab(0) })
    $('#btnballance').click( function() { selecttab(1) })
    $('#btnsettings').click( function() { selecttab(2) })
    $('#btnchat').click( function() { selecttab(3) })
    $('#btnfaq').click( function() { selecttab(4) })
    $('#btnminefield').click()
})


</script>
<div class='header'>
    <span>Logged in as <span class='editable sync_user_name'><%= user.name %></span>&nbsp;&nbsp;&nbsp;</span>
  <span class='btn' id="btnminefield" >MineField</span>
  <span class='btn' id="btnballance" >Balance<span id='small_balance'>&nbsp;<span class='cash sync_user_cash'><%= user.cash %></span>&nbsp;</span></span>
<!--  <span class='btn' id="btnchat" >Chat</span> -->
<!--  <span class='btn' id="btnsettings" >Settings</span> -->
  <span class='float-right'>
    connected users: <span id="sync_globalobject_users"></span>&nbsp;&nbsp;
    <span class='btn' id="btncontact"><a href="http://bitcoinlab.org" target="_blank"><font color="white">Contact</font></a></span>
    <span class='btn' id="btnfaq">Faq</span>
    <span class='btn' id="btnlogout">Logout</span>
    <span id="span_users"></span>
  </span>
</div>

<div class='tabcontent' id='tab_minefield'>
<div class='subtab'> 
    <center>
    <h3>MineField Dancer</h3>
    <div id="minefield_ammount_radio">
    <input type="radio" id="radio1" name="radio" checked="checked" /><label for="radio1">free</label>
    <input type="radio" id="radio2" name="radio" /><label for="radio2">0.01</label>
    <input type="radio" id="radio3" name="radio" /><label for="radio3">0.05</label>
    <input type="radio" id="radio4" name="radio" /><label for="radio4">0.1</label>
    <input type="radio" id="radio5" name="radio" /><label for="radio5">0.25</label>
    <input type="radio" id="radio6" name="radio" /><label for="radio6">0.5</label>
    <input type="radio" id="radio7" name="radio" /><label for="radio7">1.0</label>
    <input type="radio" id="radio8" name="radio" /><label for="radio8">2.0</label>
    </div>

    <br>
    
    <div id="minefield"></div>

    <br>

    <div style="width: 600px;" id="minefieldslider"></div>
    <br>
    <b><div id="minefieldchance">14 mines, win amount x2.05</div></b>
    <br>

    <table id='minefield'>
    </table>


    <span id='sync_minefield_hash'>click on the minefield to start a new game.</span>

</center>
</div>

</div>


<div class='tabcontent' id='tab_chat'>
<div class='subtab'> 
    <center>
    <h3>Chat</h3>
    this chat is currently reacheable only via irc (<a href='irc://irc.freenode.net/bancrotus'>irc.freenode.net #bancrotus</a>)
    </center>
</div>
</div>

<div class='tabcontent' id='tab_settings'>
<div class='subtab'> 
<center>
    <h3>Settings</h3>
    <br>
    
<table>
    <tr>
    <td>username</td><td width="50px"></td><td><b><span class='editable sync_user_name'>?</span></b>
    </tr>
    <tr>
    <td>user id</td><td width="50px"></td><td><b><span class='sync_user__id'>?</span></b>
    </tr>
</table>
</center>
</div>
</div>

<div class='tabcontent' id='tab_balance'>

<div class='subtab'> 
<center>
    <font color="green"><h2><span class='sync_user_cash'>?</span></h2></font> <img width="50px" src="/img/bitcoin2.png">
</center>
</div>

<div class='subtab'> 
<center>
    <h3>Direct Transfer</h3>
    <span id='paybelow'>pay to addresses below:<br><br></span>
    <span id='address_deposit'></span>

 <br> 
<br>
    <span class='btn blackborder' id="btn_deposit_generate">generate</span>
</center>
</div>

<div class='subtab'> 
<center>
    <h3><a href="https://www.mybitcoin.com">Mybitcoin.com</a> Transfer (faster)</h3>
    I'd like to deposit <b><span id='edit_mybitcoin_amount' class='editable'>[ amount ]</span></b> BTC with <a href="https://www.mybitcoin.com">mybitcoin.com</a>
<div id="mybitcoin_link"></div>
</center>
</div>


<div class='subtab'> 
<center>
    <h3>Withdrawal</h3>
    I'd like to <span class='btn blackborder' id="btnwithdraw">withdraw</span> <b><span id='user_withdrawal_amount' class='editable'>[ amount ]</span></b> BTC to <b><span id='user_withdrawal_address' class='sync_user_address_withdrawal editable'>[ address ]</span></b><br>
</center>
</div>
<div class='subtab'> 
<center>
    <h3>Transaction History</h3>
    <span id="transaction_history">no transactions</span>
    <br><br>
</center>
</div>
</div>

<div class='tabcontent' id='tab_faq'>
<div class='subtab'> 
    <center><h3> faq </h3></center>
</div>
</div>


<div class='message' id='message'>message</div>

<!--
<div class='footer'>
...
</div>
-->
