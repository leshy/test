<script type="text/javascript">



function Question(socket,message,callback) {
    
}

function RemoteObject(name,obj) {
    
}


RemoteObject.prototype.subscribe = function(property,callback) {
    
}

RemoteObject.prototype.update = function(values) {
    
}

RemoteObject.prototype.set = function(property,value) {

}

RemoteObject.prototype.flush = function() {

}







    $(document).ready(function() { 

	
	var secret = "<%= user.secret %>"
	var uid = "<%= user._id %>"

	var remoteobjects = {}
	var object_subscriptions = {}
	

	$("#bla").html("js ok")
	$("#message").hide()


	$('.editable').click(function(event) {
	    var node = $(event.currentTarget)
	    var data = node.html()
	    if (data.search('<input') != -1) { return }

	    var input = $("<input size='" + (data.length + 1) + "' type='text' value='" + data + "'>")

	    function done() {
		input.trigger('edited',[node,input.val(),data])
		node.html(input.val())
	    }

	    input.blur(done)

	    input.keypress(function(event) {
		if (event.which == 13) { done() }
	    })

	    node.html(input)
	    input.focus()
	    input.trigger('editstart',[node,data])
	});


	$(".sync_user_name").bind('edited',function(e,node,data,olddata) {
	    syncproperty("user","name",data)
	})


	$("#edit_mybitcoin_amount").bind('editstart',function(e,node,data) {
	    $("#mybitcoin_link").html("")	    
	})

	$("#user_withdrawal_amount").bind('edited',function(e,node,data) {
	    var amount = parseFloat(data)
	    if (!amount) {
		message( "invalid amount")
		return
	    }
	})

	$("#user_withdrawal_address").bind('edited',function(e,node,data) {	    
	    if (data.length != 34) {
		message( "invalid address")
		return
	    } else {
		syncproperty("user","address_withdrawal",data)
	    }
	})


	function preinitminefield() {
	$( "#minefieldslider" ).slider({
			value:14,
			min: 3,
			max: 24,
			step: 1,
			slide: function( event, ui ) {
			    var chance = 100 - (ui.value / (25 / 100))
			    var win = (90 / chance)
			    win = Math.round(parseFloat(win) * 100) / 100
			    displayminefield(generateminefield(ui.value))

			    $( "#minefieldchance" ).html( ui.value + " mines, win amount x" + win );
			}

	    
		});

	    $( "#minefield_ammount_radio" ).buttonset();
	}


	preinitminefield()

	function initminefield() {
	    socket.emit('initminefield',{ mines: 3 })
	}

	function generateminefield(minenum) {
	    console.log("generating minefield of size",minenum)
	    function randomboolean() {
		return (Math.random() > 0.5)
	    }

	    function randomrange(num) {
		return Math.floor(Math.random() * num)
 	    }

	    function rarray(len,rndfn) {
		var a = []
		for (var i = 0 ; i <len;i++) { a.push(rndfn())}
		return a
	    }
	    function r2darray(len,rndfn) {
		return rarray(len,function() { return rarray(len,rndfn) })
	    }

	    var cnt = -1
	    function counter() { cnt++; return cnt }
	    
	    var empty = rarray(25,counter)
	    var mines = rarray(25,function() { return false } )

	    
	    for (var i = 0; i < minenum; i++) { 
		var num = randomrange(empty.length)
		mines[empty[num]] = true
		empty.splice(num,1)

	    }

	    return r2darray(5,function() { var a = mines.pop(); return a } )

	}


	function displayminefield(minefield) {
	    var code = "<table>"
	    minefield.forEach(function(row) { 
		code += "<tr>"
		row.forEach (function (entry) {
		    code +="<td>"

		    if (entry == true) { 
		    code +="<span class='mine mine_yes'>"
		    }
		    if (entry == false) { 
		    code +="<span class='mine mine_no'>"
		    }
		    if (entry == undefined) { 
		    code +="<span class='mine mine_undefined'>"
		    }


		    code +="</span>"
		    code +="</td>"
		})
		code += "</tr>"
	    })
	    code += "</table>"
	    $("#minefield").html(code)
	}

	displayminefield(generateminefield(12))


	function message(string) {
	    var message = $("#message")
	    message.html(string)
	    message.fadeIn(500)
	    setTimeout(function() { message.fadeOut(500) },1000)
	}

	function reload_transaction_history() {
	    if (remoteobjects.user.transaction_history.length == 0) { 
		var code = "no transactions"
	    } else {
		
		var code = "<table cellspacing=0 cellpadding=13 class='transactionhistory'>"
		code += "<thead>"
		code += "<tr>"
		code += "<th>time</th>"
		code += "<th>from/to</th>"
		code += "<th></th>"
		code += "<th>amount</th>"
		code += "<th>balance</th>"
		code += "</tr>"
		code += "</thead>"


		var darkflip = true

		remoteobjects.user.transaction_history.forEach(function(row) {
		    var time = new Date(parseInt(row.time))
		    console.log(parseInt(row.time))
		    var now = time.getDate() + "." + time.getMonth() + "." + time.getFullYear() + ", " + time.getHours() + ":" +  time.getMinutes() + ":" + time.getSeconds()
		    
		    if (darkflip) {
			code += "<tr bgcolor='#ddd'>"
			darkflip = false
		    } else {
			code += "<tr>"
			darkflip = true
		    }

		    code +="<td class='transactionhistory'>" +  now  + "</td>"
		    code +="<td class='transactionhistory'>" +  row.other_party + "</td>"
		    if (row.deposit) {
			code +="<td class='transactionhistory plus'><font color='green' size='2em'><b>+</b></font></td>"
		    } else {
			code +="<td class='transactionhistory minus'><font color='red' size='2em'><b>-</b></font></td>"
		    }
		    code +="<td class='transactionhistory'>" +  row.amount + "</td>"
		    code +="<td class='transactionhistory'>" +  row.balance + "</td>"
		    code += "</tr>"
		})

		code += "</table>"
	    }

	    $("#transaction_history").html(code)
	}
	
	$("#edit_mybitcoin_amount").bind('edited',function(e,node,data,olddata) {

	    var amount = parseFloat(data)
		console.log("amount",amount)

	    if (!amount) {
		message("invalid amount")
		//$("#mybitcoin_link").html( "invalid amount :(")
		return
	    }
	    
	    $("#mybitcoin_link").html("communicating with mybitcoin...")
	    $.post("/ajax/mybitcoinlink",{ secret: secret, amount: amount }, function (data) {
		data = $.parseJSON(data)
		if (data.responsecode == 0) {
		    $("#mybitcoin_link").html ("<a href='https://www.mybitcoin.com/sci/paypage.php?t=" + data.message + "'>pay</a>" )
		} else {
		    $("#mybitcoin_link").html( data.message)
		}
	    })
	})
	

	var socket = io.connect('http://lgate-public:45284');
	socket.emit('hello', { uid: uid, secret: secret });
	socket.on('connection', function () {
	    console.log('websocket connected. authorizing')
	});


	$("#btnwithdraw").click(function() { 
	    console.log("CALLING SENDMONEY")
	    socket.emit('call', { fun: 'sendMoney', secret: secret, args: [ $("#user_withdrawal_address").html(), $("#user_withdrawal_amount").html() ]  })
	})
    
	$("#btn_deposit_generate").click(function() {
	    $.post("/ajax/deposit",{ secret: secret }, function (data) { 
		data = $.parseJSON(data)
		if (data.responsecode == 1) { message("address limit reached") }
	    })
	})

    
	$("#logout").click(function() {
	    $.post("/ajax/logout",{ secret: secret }, function (data) { 
		data = $.parseJSON(data)
	    })
	})



	socket.on('msg', function(data) {
	    console.log("GOT MESSAGE",data)
	    message(data.message)
	})



	socket.on('minefield', function(data) {
	    $("minefieldhash").html(data.hash)
	})

	socket.on('objectsync', function(data) {
	    console.log("new object stream received",data)
	    
	    for (var objectname in data) {
		updateobject(objectname,jQuery.parseJSON(data[objectname]))
	    }
	})


	function syncproperty(objectname,property,value) {
	    remoteobjects[objectname][property] = value
	    syncobject(objectname)
	    remoteobjects[objectname][property] = null
	}

	function syncobject(objectname) {
	    console.log('syncing',objectname,remoteobjects[objectname])
	    var data = {objects : {}}
	    data.objects[objectname] = remoteobjects[objectname]
	    data.secret = secret
	    socket.emit('objectsync', data );
	}
	

	function equal(object1, object2) {
	    if (!object2) { return false }

	    if ((typeof(object1) != 'object') || (typeof(object2) != 'object' )) {
		return (object1 == object2)
	    }

	    
	    if (object1.length != object2.length) { return false }
	    
	    for (var property in object1) { 

		if (object1[property] != object2[property]) { return false }
	    }

	    return true   
	}

	    /*$(".user_cash").html('<span style="background: red;">' + data.cash + '</span>')
	    setTimeout(function() {
		$(".user_cash").html(data.cash)
	    },1000)
	    */

	function updateobject(objectname,object) {
	    if (!remoteobjects[objectname]) {
		remoteobjects[objectname] = {}
	    }

	    console.log("updating local object '" + objectname + "'" )

	    for (var property in object) {
		if (!equal(object[property],remoteobjects[objectname][property])) {
		    remoteobjects[objectname][property] = object[property]
//		    console.log(property + " changed", remoteobjects[objectname][property])
		    objectchange_trigger(objectname,property,object)
		}
	    }
	}

	function objectchange_trigger(objectname,property,object) {
	    if (object_subscriptions[objectname]) {
		if  (object_subscriptions[objectname][property] ) {
		    var subscriptions = object_subscriptions[objectname][property]
		    subscriptions.forEach(function (callback) {
			callback(object,property,objectname)
		    })
		}

		if ( object_subscriptions[objectname]["*"] ) {
		    var subscriptions = object_subscriptions[objectname]["*"]
		    subscriptions.forEach(function (callback) {
			callback(object,property,objectname)
		    })
		}
	    }
	}
	
	function objectchange(objectname,property,callback) {
	    if (!object_subscriptions[objectname]) { object_subscriptions[objectname] = {} }
	    if (!object_subscriptions[objectname][property]) { object_subscriptions[objectname][property] = [] }
	    object_subscriptions[objectname][property].push(callback)	    
	}
	

	objectchange("user","*",function(user,property) {
	    if ((user[property] != undefined) && (user[property] != null)) {
		$("#sync_user_" + property).html(user[property])
		$(".sync_user_" + property).html(user[property])
	    }
	    //console.log(property,$(".sync_user_" + property))
	})


	objectchange("user","transaction_history",function(user) {
	    reload_transaction_history()
	})

	objectchange("user","address_deposit",function(user) {
	    console.log("ADDRESS DEPOSIT CHANGED")
	    if (user.address_deposit.length == 0) { $("#address_deposit").html("no addresses"); $("#paybelow").hide(); return }

	    var list = $("<span></span>")
	    user.address_deposit.forEach(function(address) { list.append($("<b>" + address + "<b><br>"))})
	    
	    $("#paybelow").show()
	    
	    if (user.address_deposit.length == 3) {
		$("#btn_deposit_generate").hide()
	    } else {
		$("#btn_deposit_generate").show()
	    }

	    $("#address_deposit").html(list)
	    //console.log(list)
	})

	objectchange("user","cash",function(user) {
	    
	})


	objectchange("user","address_withdrawal",function(user) {
	    if (user.address_withdrawal && user.address_withdrawal != "null") { $("#user_address_withdrawal").html(user.address_withdrawal); return }
	})


	
	var tabs = [ $('#tab_minefield'), $('#tab_balance'),$('#tab_settings'), $('#tab_chat'), $('#tab_faq'), $('#tab_debugger') ]
	tabs.forEach(function(tab) {tab.hide() })
	var selectedtab = undefined

	function selecttab(tabid) {
	    if (selectedtab != undefined) {
		tabs[selectedtab].trigger('tabhide')
		tabs[selectedtab].hide()
		if (tabid == selectedtab) { selectedtab = undefined; return }
	    }
	    tabs[tabid].trigger('tabshow')
	    tabs[tabid].show()
	    selectedtab = tabid
	}

	$('#tab_balance').bind('tabshow', function() { $('#small_balance').hide() } )
	$('#tab_balance').bind('tabhide', function() { $('#small_balance').show() } )

	$('#btnminefield').click( function() { selecttab(0) })
	$('#btnballance').click( function() { selecttab(1) })
	$('#btnsettings').click( function() { selecttab(2) })
	$('#btnchat').click( function() { selecttab(3) })
	$('#btnfaq').click( function() { selecttab(4) })
	$('#btndebugger').click( function() { selecttab(5) })	
	$('#btnminefield').click()
    })


</script>
<div class='header'>
    <span>Logged in as <span class='editable sync_user_name'><%= user.name %></span>&nbsp;&nbsp;&nbsp;</span>
  <span class='btn' id="btnminefield" >MineField</span>
  <span class='btn' id="btnballance" >Balance<span id='small_balance'>&nbsp;<span class='cash sync_user_cash'><%= user.cash %></span>&nbsp;</span></span>
<!--  <span class='btn' id="btnchat" >Chat</span> -->
<!--  <span class='btn' id="btnsettings" >Settings</span> -->
  <span class='float-right'>
    <span class='btn' id="btndebugger">Debugger</span>
    <span class='btn' id="btncontact"><a href="http://bitcoinlab.org"><font color="white">Contact</font></a></span>
    <span class='btn' id="btnfaq">Faq</span>
    <span class='btn' id="btnlogout">Logout</span>
    <span id="span_users"></span>
  </span>
</div>

<div class='tabcontent' id='tab_minefield'>
<div class='subtab'> 
    <center>
    <h3>MineField</h3>
    <div id="minefield_ammount_radio">
    <input type="radio" id="radio1" name="radio" checked="checked" /><label for="radio1">free</label>
    <input type="radio" id="radio2" name="radio" /><label for="radio2">0.01</label>
    <input type="radio" id="radio3" name="radio" /><label for="radio3">0.05</label>
    <input type="radio" id="radio4" name="radio" /><label for="radio4">0.1</label>
    <input type="radio" id="radio5" name="radio" /><label for="radio5">0.25</label>
    <input type="radio" id="radio6" name="radio" /><label for="radio6">0.5</label>
    <input type="radio" id="radio7" name="radio" /><label for="radio7">1.0</label>
    <input type="radio" id="radio8" name="radio" /><label for="radio8">2.0</label>
    </div>

    <br>
    
    <div id="minefield"></div>

    <br>

    <div style="width: 600px;" id="minefieldslider"></div>
    <br>
    <div id="minefieldchance">14 mines, win amount x2.05</div>
    <br>

    <table id='minefield'>
    </table>

    <br>

    <span id='minefieldhash'>Proof hash nA2xqeuW9ODQuQ5BnKe4W2WBWBx4ukE7</span>

</center>
</div>

</div>


<div class='tabcontent' id='tab_chat'>
<div class='subtab'> 
    <center>
    <h3>Chat</h3>
    this chat is currently reacheable only via irc (<a href='irc://irc.freenode.net/bancrotus'>irc.freenode.net #bancrotus</a>)
    </center>
</div>
</div>

<div class='tabcontent' id='tab_settings'>
<div class='subtab'> 
<center>
    <h3>Settings</h3>
    <br>
    
<table>
    <tr>
    <td>username</td><td width="50px"></td><td><b><span class='editable sync_user_name'>?</span></b>
    </tr>
    <tr>
    <td>user id</td><td width="50px"></td><td><b><span class='sync_user__id'>?</span></b>
    </tr>
</table>
</center>
</div>
</div>

<div class='tabcontent' id='tab_balance'>

<div class='subtab'> 
<center>
    <font color="green"><h2><span class='sync_user_cash'>?</span></h2></font> <img width="50px" src="/img/bitcoin2.png">
</center>
</div>

<div class='subtab'> 
<center>
    <h3>Direct Transfer</h3>
    <span id='paybelow'>pay to addresses below:<br><br></span>
    <span id='address_deposit'></span>

 <br> 
<br>
    <span class='btn blackborder' id="btn_deposit_generate">generate</span>
</center>
</div>

<div class='subtab'> 
<center>
    <h3><a href="https://www.mybitcoin.com">Mybitcoin.com</a> Transfer (faster)</h3>
    I'd like to deposit <b><span id='edit_mybitcoin_amount' class='editable'>[ amount ]</span></b> BTC with <a href="https://www.mybitcoin.com">mybitcoin.com</a>
<div id="mybitcoin_link"></div>
</center>
</div>


<div class='subtab'> 
<center>
    <h3>Withdrawal</h3>
    I'd like to <span class='btn blackborder' id="btnwithdraw">withdraw</span> <b><span id='user_withdrawal_amount' class='editable'>[ amount ]</span></b> BTC to <b><span id='user_withdrawal_address' class='sync_user_address_withdrawal editable'>[ address ]</span></b><br>
</center>
</div>
<div class='subtab'> 
<center>
    <h3>Transaction History</h3>
    <span id="transaction_history">no transactions</span>
    <br><br>
</center>
</div>
</div>

<div class='tabcontent' id='tab_faq'>
<div class='subtab'> 
    <center><h3> faq </h3></center>
</div>
</div>


<div class='tabcontent' id='tab_debugger'>
  
  <div class='blackbox'>debugger</div>
  <div id="bla">
    need javascript.
  </div>
  <br>

  <button id="deposit">deposit directly</button><button id="mybitcoin">mybitcoin</button><button id="socketio">socketio</button>

  <div class='blackbox'>user</div>
  <% for (var entry in user) { %>
  <%= entry %>: <b><span id="user_<%= entry %>"><%= user[entry] %></span></b><br>
  <% } %>


  <div class='blackbox'>headers</div>
  <% for (var header in headers) { %>
  <%= header %>: <b><%= headers[header] %></b><br>
  <% } %>

</div>


<div class='message' id='message'>message</div>

<!--
<div class='footer'>
...
</div>
-->
