
<link rel='stylesheet' href='/css/adminstyle.css' />
<script type='text/javascript' src='/js/d3/d3.js'></script>


<script type="text/javascript">


$(document).ready(function() { 

    loglines = []

    function Router() { 
	this.subscriptions = {}
	this.remoteobjects = {}
    }

    Router.prototype.subscribe = function(object,property,callback) {
	var self = this
	if (!self.subscriptions[object]) { self.subscriptions[object] = {} }
	if (!self.subscriptions[object][property]) { self.subscriptions[object][property] = [] }
	self.subscriptions[object][property].push(callback)
	for (var prop in self.subscriptions[object]) {  console.log(prop) }
    }


    Router.prototype.event = function(object,property,value,oldvalue) {
	var self = this
	var objectname = object.objectname
	console.log("event",objectname,object,property,value)

	if (self.subscriptions["*"]["*"]) {
	    self.subscriptions["*"]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}

	if (self.subscriptions["*"][property]) {
	    self.subscriptions["*"][property].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}


	if (self.subscriptions[objectname]["*"]) {
	    self.subscriptions[objectname]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}

	if (!self.subscriptions[objectname]) { return }
	if (!self.subscriptions[objectname][property]) { return }
	self.subscriptions[objectname][property].forEach( function(callback) {
	    callback(value,oldvalue,property,object)
	})
    }


    router = new Router()

    function RemoteObject(name,obj) {
	this.objectname = name
	if (name == 'user') { user = this }
	router.remoteobjects[name] = this
	if (!router.subscriptions[name]) {
	    router.subscriptions[name] = {}
	}
	this.update(obj)
    }


    RemoteObject.prototype.update = function(obj) {
	//	console.log("REMOTEOBJECT COSTRUCTING FROM",obj)

	var self = this
	//console.log("update",router,obj)
	for (var property in obj) {
	    function c(property,value) {
		if (value == "function") {
		    self[property] = function() { 
			var data = {}
			data['object'] = self.objectname
			data['function'] = property
			var args = Array.prototype.slice.call(arguments);
			//	console.log ("calling remote function " + property,args) 
			data['arguments'] = args
			//console.log(data)
			socket.emit('call',JSON.stringify(data))
		    }
		    return
		}

		if (!self["_" + property]) { 
		    self.__defineSetter__(property, function (value) { 
			var data = {objects: {}, secret: secret}
			data.objects[self.objectname] = {}
			data.objects[self.objectname][property] = value
			//			console.log("emiting objectsync")
			socket.emit ('objectsync',JSON.stringify(data))
		    })
		    self.__defineGetter__(property, function () { return self["_" + property] })
		} else {
		    if (self["_" + property] == value ) { return }
		}
		
		var oldvalue = self["_" + property]
		self["_" + property] = value
		if (oldvalue != value) {
		    router.event(self,property,value,oldvalue)
		}
	    }
	    c(property,obj[property])
	}
    }


    var socket = io.connect('<%= host %>:<%= port %>');
    socket.emit('adminlogin', { secret: "<%= secret %>" });
    socket.on('connection', function () {
	console.log('websocket connected.')
    })

    socket.on('objectsync', function(data) {
	data = JSON.parse(data)
	
	for (var objectname in data) {
	    console.log("objectsync",objectname,data[objectname])
	    updateobject(objectname,data[objectname])
	}
    })

    socket.on('disconnect', function(data) {
	location.reload(true)
    })


    function updateobject(objectname,object) {
	if (!router.remoteobjects[objectname]) {
	    //console.log("created new remote object '" + objectname + "'",object,router )
	    var newobj = new RemoteObject(objectname,object)
	    //console.log(newobj)
	    router.remoteobjects[objectname] = newobj
	} else {
	    //console.log("updating remote object '" + objectname + "'",object,router )
	    router.remoteobjects[objectname].update(object)
	}
    }

    function syncproperty(objectname,property,value) {
	router.remoteobjects[objectname][property] = value
    }


    function equal(object1, object2) {
	if (!object2) { return false }

	if ((typeof(object1) != 'object') || (typeof(object2) != 'object' )) {
	    return (object1 == object2)
	}

	
	if (object1.length != object2.length) { return false }
	
	for (var property in object1) { 

	    if (object1[property] != object2[property]) { return false }
	}

	return true   
    }

    

    router.subscribe("*","*",function(value,oldvalue,property,object) {
	//console.log(object.objectname, "PROPERTY UPDATED", property,value)
	if ((object[property] != undefined) && (object[property] != null)) {
	    $("#sync_" + object.objectname + "_" + property).html(object[property])
	    $(".sync_" + object.objectname + "_" + property).html(object[property])
	}
	//console.log(property,$(".sync_user_" + property))
    })


    router.subscribe("user","balance",function(value) {
	value = parseFloat(value)

	//value = value - 4
	$("#btcbalance").html("<span class='minefieldcash'>" + (Math.round(value * 1000) / 1000) + "</span> BTC")
	
	var btctousd = 14
	var btctohrk = btctousd * 5.25


	$("#othevalutes").html ( Math.round(value * btctousd) + " USD, " + Math.round(value * btctohrk) + " HRK"  )
    })

    router.subscribe("user","logline",function(value) {
	t = new Date(value.time)
	var time = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds()
	var line = $("<span><font color='blue'>" + time + "</font> - " + value.message + "</span>")

	loglines.unshift(line)
	if (loglines.length > 10) {
	    loglines.pop()
	}

	

	$("#log").append( $("<span><font color='blue'>" + time + "</font> - " + value.area + " " + value.loglevel + " - " + value.message + "</span>"))
	$("#log").append("<br>")
    })





    /*

    var data = [4, 8, 15, 16, 23, 42];


    var chart = d3.select("#testchart")
	.append("svg:svg")
	.attr("class", "chart")
	.attr("width", 640)
	.attr("height", 20 * data.length)
	.append("svg:g")
	.attr("transform", "translate(10,15)");

    var x = d3.scale.linear()
	.domain([0, d3.max(data)])
	.range(["0px", "600px"]);


    var y = d3.scale.ordinal()
	.domain(data)
	.rangeBands([0, 100]);

    chart.selectAll("rect")
	.data(data)
	.enter().append("svg:rect")
	.attr("y", y)
	.attr("width", x)
	.attr("height", y.rangeBand());

    chart.selectAll("text")
	.data(data)
	.enter().append("svg:text")
	.attr("x", x)
	.attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
	.attr("dx", -3) // padding-right
	.attr("dy", ".35em") // vertical-align: middle
	.attr("text-anchor", "end") // text-align: right
	.attr("stroke","white")
	.text(String);

    chart.append("svg:line")
	.attr("y1", 0)
	.attr("y2", 120)
	.attr("stroke", "#000");

    chart.selectAll("line")
	.data(x.ticks(10))
	.enter().append("svg:line")
	.attr("x1", x)
	.attr("x2", x)
	.attr("y1", 0)
	.attr("y2", 100)
	.attr("stroke", "#ccc");

    chart.selectAll("text.rule")
	.data(x.ticks(10))
	.enter().append("svg:text")
	.attr("class", "rule")
	.attr("x", x)
	.attr("y", 0)
	.attr("dy", -3)
	.attr("text-anchor", "middle")
	.text(String);

	*/
/*

    var t = 1297110663, // start time (seconds since epoch)
    v = 70, // start value (subscribers)

    data = d3.range(33).map(next); // starting dataset
  
    function next() {
	return {
	    time: ++t,
	    value: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
	};
    }

    setInterval(function() {
	data.shift();
	data.push(next());
	redraw();
    }, 1500);

    var w = 30, h = 80;
 
    var x = d3.scale.linear()
	.domain([0, 1])
	.range([0, w]);
 
    var y = d3.scale.linear()
	.domain([0, 100])
	.rangeRound([0, h]);

    var chart = d3.select("#testchart")
	.append("svg:svg")
	.attr("class", "chart")
	.attr("width", w * data.length - 1)
	.attr("height", h);

    chart.selectAll("rect")
	.data(data)
	.enter().append("svg:rect")
	.attr("x", function(d, i) { return x(i) - .5 })
	.attr("y", function(d) { return h - y(d.value) - .5; })
	.attr("width", w)
	.attr("height", function(d) { return y(d.value); });

    chart.append("svg:line")
	.attr("x1", 0)
	.attr("x2", w * data.length)
	.attr("y1", h - .5)
	.attr("y2", h - .5)
	.attr("stroke", "#000");


    chart.selectAll("text")
	.data(data)
	.enter().append("svg:text")
	.attr("x", function(d,i) { return x(i) + 9 } )
	.attr("y", function(d) { return h - 10 })
	.attr("text-anchor", "center") // text-align: right
	.attr("stroke","white")
	.text( function(d,i) { return d.value });


     
     var text = chart.selectAll("text")
	 .data(data, function(d) { return d.time; });

     text.transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i) - .5; });
     

     text.exit().transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i - 1) - .5; })
	 .remove();
 

     var rect = chart.selectAll("rect")
	 .data(data, function(d) { return d.time; });
     
     rect.enter().insert("svg:rect", "line")
	 .attr("x", function(d, i) { return x(i + 1) - .5; })
	 .attr("y", function(d) { return h - y(d.value) - .5; })
	 .attr("width", w)
	 .attr("height", function(d) { return y(d.value); })
	 .transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i) - .5; });
     
     rect.transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i) - .5; });
     
     rect.exit().transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i - 1) - .5; })
	 .remove();
 
 }
*/

})

</script>

<div class='subtab'> 
<center>
    <h3>Current State dd</h3>
    <img width="125px" src="/img/moneyz.png">
    <h3><span id="btcbalance"></span></h3>
    <h5><span id="othevalutes"></span></h5>
</center>
</div>


<div class='subtab'> 
<center>
    <h3>Graphs</h3>

    <div id="testchart"></div>

</center>
</div>

<div class='subtab'> 
<center>
    <h3>Log</h3>
</center>

<div id="log"></div>

</div>