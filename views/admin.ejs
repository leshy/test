
<link rel='stylesheet' href='/css/adminstyle.css' />
<script type='text/javascript' src='/js/d3/d3.js'></script>


<script type="text/javascript">


$(document).ready(function() { 

    loglines = []

    var admin = undefined


    function Router() { 
	this.subscriptions = {}
	this.remoteobjects = {}
	this.callback = {}
    }

    Router.prototype.subscribe = function(object,property,callback) {
	var self = this
	if (!self.subscriptions[object]) { self.subscriptions[object] = {} }
	if (!self.subscriptions[object][property]) { self.subscriptions[object][property] = [] }
	self.subscriptions[object][property].push(callback)
	for (var prop in self.subscriptions[object]) {  console.log(prop) }
    }


    Router.prototype.event = function(object,property,value,oldvalue) {
	var self = this
	var objectname = object.objectname
	console.log("event",objectname,object,property,value)

	if (self.subscriptions["*"]["*"]) {
	    self.subscriptions["*"]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}

	if (self.subscriptions["*"][property]) {
	    self.subscriptions["*"][property].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}


	if (self.subscriptions[objectname]["*"]) {
	    self.subscriptions[objectname]["*"].forEach( function(callback) {
		callback(value,oldvalue,property,object)
	    })
	}

	if (!self.subscriptions[objectname]) { return }
	if (!self.subscriptions[objectname][property]) { return }
	self.subscriptions[objectname][property].forEach( function(callback) {
	    callback(value,oldvalue,property,object)
	})
    }


    router = new Router()

    function RemoteObject(name,obj) {
	this.objectname = name
	if (name == 'user') { admin = this }
	router.remoteobjects[name] = this
	if (!router.subscriptions[name]) {
	    router.subscriptions[name] = {}
	}
	this.update(obj)
    }


    RemoteObject.prototype.update = function(obj) {
	//	console.log("REMOTEOBJECT COSTRUCTING FROM",obj)

	var self = this
	//console.log("update",router,obj)
	for (var property in obj) {
	    function c(property,value) {
		if (value == "function") {
		    self[property] = function() { 
			var data = {}
			data['object'] = self.objectname
			data['function'] = property
			var args = Array.prototype.slice.call(arguments);

			//	console.log ("calling remote function " + property,args) 

			if (typeof(args[args.length - 1]) == 'function') {
			    var answerid = property + new Date().getTime()
			    data['answerid'] = answerid
			    router.callback[answerid] = args.pop()
			    setTimeout(function() { delete router[answerid] },10000)
			}
			
			data['arguments'] = args

			console.log('calling',data)
			socket.emit('call',JSON.stringify(data))
		    }
		    return
		}

		if (!self["_" + property]) { 
		    self.__defineSetter__(property, function (value) { 
			var data = {objects: {}, secret: secret}
			data.objects[self.objectname] = {}
			data.objects[self.objectname][property] = value
			//			console.log("emiting objectsync")
			socket.emit ('objectsync',JSON.stringify(data))
		    })
		    self.__defineGetter__(property, function () { return self["_" + property] })
		} else {
		    if (self["_" + property] == value ) { return }
		}
		
		var oldvalue = self["_" + property]
		self["_" + property] = value
		if (oldvalue != value) {
		    router.event(self,property,value,oldvalue)
		}
	    }
	    c(property,obj[property])
	}
    }



    var socket = io.connect('<%= host %>:<%= port %>');
    socket.emit('adminlogin', { secret: "<%= secret %>" });
    socket.on('connection', function () {
	console.log('websocket connected.')
    })

    socket.on('answer', function(data) { 
	if (router.callback[data.answerid]) {
	    router.callback[data.answerid](JSON.parse(data.data))
	} else {
	    console.log("function response received but there is no answerid.. ")
	}
    })

    socket.on('objectsync', function(data) {
	data = JSON.parse(data)
	
	for (var objectname in data) {
	    console.log("objectsync",objectname,data[objectname])
	    updateobject(objectname,data[objectname])
	}
    })

    socket.on('disconnect', function(data) {
	location.reload(true)
    })


    function updateobject(objectname,object) {
	if (!router.remoteobjects[objectname]) {
	    //console.log("created new remote object '" + objectname + "'",object,router )
	    var newobj = new RemoteObject(objectname,object)
	    //console.log(newobj)
	    router.remoteobjects[objectname] = newobj
	} else {
	    //console.log("updating remote object '" + objectname + "'",object,router )
	    router.remoteobjects[objectname].update(object)
	}
    }

    function syncproperty(objectname,property,value) {
	router.remoteobjects[objectname][property] = value
    }


    function equal(object1, object2) {
	if (!object2) { return false }

	if ((typeof(object1) != 'object') || (typeof(object2) != 'object' )) {
	    return (object1 == object2)
	}

	
	if (object1.length != object2.length) { return false }
	
	for (var property in object1) { 

	    if (object1[property] != object2[property]) { return false }
	}

	return true   
    }

    

    router.subscribe("*","*",function(value,oldvalue,property,object) {
	//console.log(object.objectname, "PROPERTY UPDATED", property,value)
	if ((object[property] != undefined) && (object[property] != null)) {
	    $("#sync_" + object.objectname + "_" + property).html(object[property])
	    $(".sync_" + object.objectname + "_" + property).html(object[property])
	}
	//console.log(property,$(".sync_user_" + property))
    })


    router.subscribe("user","balance",function(value) {
	value = parseFloat(value)

	//value = value - 4
	$("#btcbalance").html("<span class='minefieldcash'>" + (Math.round(value * 1000) / 1000) + "</span> BTC")
	
	var btctousd = 14
	var btctohrk = btctousd * 5.25


	$("#othevalutes").html ( Math.round(value * btctousd) + " USD, " + Math.round(value * btctohrk) + " HRK"  )
    })

    router.subscribe("user","logline",function(value) {
	t = new Date(value.time)
	var time = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds()
	var line = $("<span><font color='blue'>" + time + "</font> - " + value.message + "</span>")

	loglines.unshift(line)
	if (loglines.length > 10) {
	    loglines.pop()
	}


	$("#log").append( $("<span><font color='blue'>" + time + "</font> - " + value.area + " " + value.loglevel + " - " + value.message + "</span>"))
	$("#log").append("<br>")
    })





    $("#testbtn").click( function () { 

//	admin.getlogstats('test','test2',function(response) { console.log("GOT RESPONSE",response) })
	admin.getlogstats(900000 * 4  ,new Date().getTime() - (24 * 60 * 60 * 1000 * 4),new Date().getTime() ,
			  function(response) { 
			      console.log("GOT RESPONSE",response) 
			      graphdata(response)
			  })
    })
    /*

      var data = [4, 8, 15, 16, 23, 42];


      var chart = d3.select("#testchart")
      .append("svg:svg")
      .attr("class", "chart")
      .attr("width", 640)
      .attr("height", 20 * data.length)
      .append("svg:g")
      .attr("transform", "translate(10,15)");

      var x = d3.scale.linear()
      .domain([0, d3.max(data)])
      .range(["0px", "600px"]);


      var y = d3.scale.ordinal()
      .domain(data)
      .rangeBands([0, 100]);

      chart.selectAll("rect")
      .data(data)
      .enter().append("svg:rect")
      .attr("y", y)
      .attr("width", x)
      .attr("height", y.rangeBand());

      chart.selectAll("text")
      .data(data)
      .enter().append("svg:text")
      .attr("x", x)
      .attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
      .attr("dx", -3) // padding-right
      .attr("dy", ".35em") // vertical-align: middle
      .attr("text-anchor", "end") // text-align: right
      .attr("stroke","white")
      .text(String);

      chart.append("svg:line")
      .attr("y1", 0)
      .attr("y2", 120)
      .attr("stroke", "#000");

      chart.selectAll("line")
      .data(x.ticks(10))
      .enter().append("svg:line")
      .attr("x1", x)
      .attr("x2", x)
      .attr("y1", 0)
      .attr("y2", 100)
      .attr("stroke", "#ccc");

      chart.selectAll("text.rule")
      .data(x.ticks(10))
      .enter().append("svg:text")
      .attr("class", "rule")
      .attr("x", x)
      .attr("y", 0)
      .attr("dy", -3)
      .attr("text-anchor", "middle")
      .text(String);

    */


    /*
      var t = 1297110663, // start time (seconds since epoch)
      v = 70, // start value (subscribers)

      data = d3.range(33).map(next); // starting dataset
      console.log(data)
      function next() {
      return {
      time: ++t,
      value: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
      };
      }

    */
    /*
      setInterval(function() {
      data.shift();
      data.push(next());
      redraw();
      }, 1500);
    */


    function graphdata(data) {
	var w = 1100, h = 500;
	
	
	var maxdatatime = d3.max(data,function(data) { return data.time} )
	var mindatatime = d3.min(data,function(data) { return data.time} )


	
	var fields = ["httpreq","cashplays","nocashplays"]
	var colours = {"httpreq": "red","cashplays":"blue","nocashplays": "green"}


	var chart = d3.select("#chart")
	    .append("svg:svg")
	    .attr("class", "chart")
	    .attr("width", w)
	    .attr("height", h);

	for (var field in fields) {
	    field = fields[field]

	lx = d3.scale.linear().domain([0, data.length]).range([0, w])
	ly = d3.scale.linear().domain([0, d3.max(data,function(data) { return data[field]} )]).range([h , 0]),
	

	    chart.selectAll('path.line')
		.data([data])
		.enter().append("svg:path")
	        .style("stroke", colours[field])
		.attr("d", d3.svg.line()
		      .x( function(d,i) { console.log(lx(i)); return lx(i)})
		      .y( function(d) {  val = ly(d[field])
					 if (!val) { return h } else {return val}}))

	}
    }



    function graphdata(data) {
	var graphwidth = 1100
	var w = 10, h = 300;
	
	

	var field = "httpreq"
	var field2 = "cashplays"
	var field3 = "nocashplays"

	var lmax = d3.max(data,function(data) { return data[field2]} )
	var l2max = d3.max(data,function(data) { return data[field3]} )
	if (l2max > lmax) { lmax = l2max }



	var maxdata = d3.max(data,function(data) { return data[field]} )

	var maxdatatime = d3.max(data,function(data) { return data.time} )
	var mindatatime = d3.min(data,function(data) { return data.time} )

	var x = d3.scale.linear()
	    .domain([mindatatime, maxdatatime])
	    .rangeRound([0, graphwidth]);

	var y = d3.scale.linear()
	    .domain([0, maxdata])
	    .rangeRound([0, h - 40]);




	var chart = d3.select("#chart")
	    .append("svg:svg")
	    .attr("class", "chart")
	    .attr("width", graphwidth)
	//	    .attr("width", w * data.length - 1)
	    .attr("height", h);



	lx = d3.scale.linear().domain([0, data.length]).range([0, graphwidth])
	ly = d3.scale.linear().domain([0, lmax]).range([h , 0]),
	


	chart.selectAll('line1')
	    .data([data])
	    .enter().append("svg:path")
	    .style("stroke", "steelblue")
	    .attr("d", d3.svg.line()
		  .interpolate("cardinal")
		  .x( function(d,i) { console.log(lx(i)); return lx(i)})
		  .y( function(d) {  val = ly(d[field2])
				     if (!val) { return h } else {return val}}))


	chart.selectAll('line2')
	    .data([data])
	    .enter().append("svg:path")
	    .style("stroke", "steelblue")
	    .style("opacity", 0.5)	
	    .attr("d", d3.svg.line()
		  .interpolate("cardinal")
		  .x( function(d,i) { console.log(lx(i)); return lx(i)})
		  .y( function(d) {  val = ly(d[field3])
				     if (!val) { return h } else {return val}}))





	chart.selectAll("textx")
	    .data(x.ticks(15))
	    .enter().append("svg:text")
	    .attr("class", "rule")
	    .attr("x", x)
	    .attr("y", 10)
	    .attr("dx", 0) // padding-right
//	    .attr("dy", ".35em") // vertical-align: middle
	    .attr("text-anchor", "middle") // text-align: right
	    .text(function(x) { 
		var t = new Date(x) 
		return t.getDate() + " " + t.getHours() + ":" + t.getMinutes()
		})
	chart.selectAll("linex")
	    .data(x.ticks(15))
	    .enter().append("svg:line")
	    .attr("x1", x)
	    .attr("x2", x)
	    .attr("y1", h)
	    .attr("y2", 20)
	    .style('opacity',0.5)
	    .attr("stroke", "#ccc")

	chart.append("svg:line")
	    .attr("x1", 0)
	    .attr("x2", graphwidth)
	    .attr("y1", h / 2)
	    .attr("y2", h / 2)
	    .style('opacity',0.5)
	    .attr("stroke", "#000")

	chart.append("svg:line")
	    .attr("x1", 0)
	    .attr("x2", 0)
	    .attr("y1", 0)
	    .attr("y2", h)
	    .attr("stroke", "#000")


	var chart = d3.select("#chart")
	    .append("svg:svg")
	    .attr("class", "chart")
	    .attr("width", graphwidth)
	//	    .attr("width", w * data.length - 1)
	    .attr("height", h);




 function fade(b) {
   return function(g, i) {
       console.log(g.httpreq)
       var selected = chart.selectAll("rect")
	   .filter(function(d) {
	       return g._id == d._id
           })

       if (b) {
	   selected.transition()
           .style("fill", "red")
	   .attr("x", function(d, i) { return x(d.time) - ((graphwidth / data.length) / 2) })
	   .attr("width",(graphwidth / data.length) * 2)
       } else {
	   selected.transition()
               .style("fill", "steelblue")
	       .attr("x", function(d, i) { return x(d.time)})
	       .attr("width",(graphwidth / data.length))
       }

   }
 }


	chart.selectAll("rect")
	    .data(data)
	    .enter().append("svg:rect")
	    .attr("fill","steelblue")
	    .style('opacity',0.5)
	    .attr("x", function(d, i) { return x(d.time)})
	    .attr("y", function(d) { return h - y(d[field]) })
	    .attr("width", (graphwidth / data.length) - 1)
	    .attr("height", function(d) { return y(d[field]); })
	    .on("mouseover", fade(true))
	    .on("mouseout", fade(false));

/*
	chart.selectAll("rect2")
	    .data(data)
	    .enter().append("svg:rect")
	    .attr("fill","green")
	    .style('opacity',0.5)
	    .attr("x", function(d, i) { return x(d.time)})
	    .attr("y", function(d) { return h - y(d[field2]) })
	    .attr("width", (graphwidth / data.length) - 1)
	    .attr("height", function(d) { return y(d[field2]); })
*/


/*
	chart.selectAll("texty")
	    .data(y.ticks(10))
	    .enter().append("svg:text")
	    .attr("y", y)
	    .attr("x", 0)
	    .attr("dx", 40)
	    .attr("dy", -5)
	    .attr("text-anchor", "end") // text-align: right
	    .text(function(y,x) { return h - y })


	chart.selectAll("liney")
	    .data(y.ticks(10))
	    .enter().append("svg:line")
	    .attr("x1", 0)
	    .attr("x2", graphwidth)
	    .attr("y1", y)
	    .attr("y2", y)
	    .style('opacity',0.5)
	    .attr("stroke", "#ccc")

*/

	chart.selectAll("linex")
	    .data(x.ticks(15))
	    .enter().append("svg:line")
	    .attr("x1", x)
	    .attr("x2", x)
	    .attr("y1", h)
	    .attr("y2", 0)
	    .style('opacity',0.5)
	    .attr("stroke", "#ccc")

	chart.append("svg:line")
	    .attr("x1", 0)
	    .attr("x2", graphwidth)
	    .attr("y1", h)
	    .attr("y2", h)
	    .attr("stroke", "#000")

	chart.append("svg:line")
	    .attr("x1", 0)
	    .attr("x2", 0)
	    .attr("y1", 0)
	    .attr("y2", h)
	    .attr("stroke", "#000")



    }

/*



chart.selectAll("text.rule")
	    .data(y.ticks(10))
	    .enter().append("svg:text")
	    .attr("class", "rule")
	    .attr("x", 0)
	    .attr("y", y)
	    .attr("dx", 10)
	    .attr("dy", -3)
	    .attr("text-anchor", "middle")
	    .text(String)

*/






	/*
    chart.selectAll("text")
	.data(data)
	.enter().append("svg:text")
	.attr("x", function(d,i) { return x(i) + 9 } )
	.attr("y", function(d) { return h - 10 })
	.attr("text-anchor", "center") // text-align: right
	.attr("stroke","white")
	.text( function(d,i) { return d.httpreq });
*/
     
 
     /*
     var rect = chart.selectAll("rect")
	 .data(data, function(d) { return d.time; });

     rect.enter().insert("svg:rect", "line")
	 .attr("x", function(d, i) { return x(i + 1) - .5; })
	 .attr("y", function(d) { return h - y(d.httpreq) - .5; })
	 .attr("width", w)
	 .attr("height", function(d) { return y(d.httpreq); })
	 .transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i) - .5; });
     
     rect.transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i) - .5; });
     
     rect.exit().transition()
	 .duration(1000)
	 .attr("x", function(d, i) { return x(i - 1) - .5; })
	 .remove();

	 }
*/
})

</script>

<div class='subtab'> 
<center>
    <h3>Current State dd</h3>
<!--    <img width="125px" src="/img/moneyz.png"> -->
    <h3><span id="btcbalance"></span></h3>
    <h5><span id="othevalutes"></span></h5>
</center>
</div>


<div class='subtab'> 
<center>
    <h3>Graphs</h3>
    <div id='chart'></div> 
    <button id='testbtn'>test</button>
</center>
</div>

<div class='subtab'> 
<center>
    <h3>Log</h3>
</center>

<div id="log"></div>

</div>